import { CampaignStats, CampaignStatus, Contact, ContactStatus, CreateContact, CreateEmailCampaign, CreateEmailLog, CreateEmailTemplate, EmailCampaign, EmailLog, EmailLogStatus, EmailTemplate } from "../types/email-system";
export declare class EmailCampaignService {
    getContacts(limit?: number, offset?: number): Promise<Contact[]>;
    getContactById(id: string): Promise<Contact>;
    getContactByEmail(email: string): Promise<Contact>;
    createContact(contact: CreateContact): Promise<Contact>;
    updateContact(id: string, updates: Partial<CreateContact>): Promise<Contact>;
    updateContactStatus(id: string, status: ContactStatus): Promise<Contact>;
    deleteContact(id: string): Promise<void>;
    getActiveContacts(): Promise<Contact[]>;
    getEmailTemplates(): Promise<EmailTemplate[]>;
    getEmailTemplateById(id: string): Promise<EmailTemplate>;
    createEmailTemplate(template: CreateEmailTemplate): Promise<EmailTemplate>;
    updateEmailTemplate(id: string, updates: Partial<CreateEmailTemplate>): Promise<EmailTemplate>;
    deleteEmailTemplate(id: string): Promise<void>;
    getEmailCampaigns(): Promise<EmailCampaign[]>;
    getEmailCampaignById(id: string): Promise<EmailCampaign>;
    createEmailCampaign(campaign: CreateEmailCampaign): Promise<EmailCampaign>;
    updateEmailCampaign(id: string, updates: Partial<CreateEmailCampaign>): Promise<EmailCampaign>;
    updateCampaignStatus(id: string, status: CampaignStatus): Promise<EmailCampaign>;
    updateCampaignSentCount(id: string, sentCount: number): Promise<EmailCampaign>;
    deleteEmailCampaign(id: string): Promise<void>;
    getScheduledCampaigns(): Promise<EmailCampaign[]>;
    getEmailLogs(campaignId?: string, contactId?: string, limit?: number, offset?: number): Promise<EmailLog[]>;
    getEmailLogById(id: string): Promise<EmailLog>;
    createEmailLog(log: CreateEmailLog): Promise<EmailLog>;
    updateEmailLog(id: string, updates: Partial<CreateEmailLog>): Promise<EmailLog>;
    updateEmailLogStatus(id: string, status: EmailLogStatus, timestamp?: string): Promise<EmailLog>;
    markEmailAsBounced(id: string, _bounceReason: string): Promise<EmailLog>;
    getCampaignStats(campaignId: string): Promise<CampaignStats>;
    getCampaignStatsByStatus(campaignId: string): Promise<Record<string, number>>;
    searchContacts(query: string, limit?: number): Promise<Contact[]>;
    getContactsCount(): Promise<number>;
    getActiveContactsCount(): Promise<number>;
    getCampaignsCount(): Promise<number>;
    bulkCreateContacts(contacts: CreateContact[]): Promise<Contact[]>;
    bulkCreateEmailLogs(logs: CreateEmailLog[]): Promise<EmailLog[]>;
}
